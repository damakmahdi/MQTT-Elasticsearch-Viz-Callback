package com.mahdi;
import com.google.gson.Gson;
import org.apache.http.HttpHost;
import org.elasticsearch.action.search.*;
import org.elasticsearch.client.RequestOptions;
import org.elasticsearch.client.RestClient;
import org.elasticsearch.client.RestHighLevelClient;
import org.elasticsearch.common.unit.TimeValue;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.search.Scroll;
import org.elasticsearch.search.SearchHit;
import org.elasticsearch.search.builder.SearchSourceBuilder;
import java.io.IOException;
import java.util.*;

public class RetrieveMeasures {

    public ArrayList<Long> ardgTimestamps = new ArrayList<>();
    public ArrayList<Double> ardgValues = new ArrayList<>();
    public ArrayList<Long> peakTimestamps = new ArrayList<>();
    public ArrayList<Double> peakValues = new ArrayList<>();



    public ArrayList<Long> getArdgTimestamps() {
        return ardgTimestamps;
    }

    public void setArdgTimestamps(ArrayList<Long> ardgTimestamps) {
        this.ardgTimestamps = ardgTimestamps;
    }

    public ArrayList<Double> getArdgValues() {
        return ardgValues;
    }

    public void setArdgValues(ArrayList<Double> ardgValues) {
        this.ardgValues = ardgValues;
    }

    public ArrayList<Long> getPeakTimestamps() { return peakTimestamps; }

    public void setPeakTimestamps(ArrayList<Long> peakTimestamps) { this.peakTimestamps = peakTimestamps; }

    public ArrayList<Double> getPeakValues() { return peakValues; }

    public void setPeakValues(ArrayList<Double> peakValues) { this.peakValues = peakValues; }




    public void getData(String index,ArrayList<Long> timestamps, ArrayList<Double> values) {

        try {
            try (final RestHighLevelClient client = new RestHighLevelClient(
                    RestClient.builder(
                            new HttpHost("localhost", 9200, "http")))) {
                final Scroll scroll = new Scroll(TimeValue.timeValueMinutes(2));
                final SearchSourceBuilder builder = new SearchSourceBuilder()
                        .query(QueryBuilders.matchAllQuery())
                        .size(1000);
                final SearchRequest request = new SearchRequest(index).scroll(scroll)
                        .source(builder);
                SearchResponse response = client.search(request, RequestOptions.DEFAULT);
                String scrollId = response.getScrollId();
                SearchHit[] hits = response.getHits().getHits();
                while (hits != null && hits.length > 0) {
                    final SearchScrollRequest scrollRequest = new SearchScrollRequest(scrollId)
                            .scroll(scroll);
                    response = client.searchScroll(scrollRequest, RequestOptions.DEFAULT);
                    scrollId = response.getScrollId();
                    hits = response.getHits().getHits();

                    for (final SearchHit hit : hits) {
                        timestamps.add((Long) hit.getSourceAsMap().get("timestamp"));
                        values.add((Double) hit.getSourceAsMap().get("value"));
                    }
                }
                final ClearScrollRequest clearScrollRequest = new ClearScrollRequest();
                clearScrollRequest.addScrollId(scrollId);
                final ClearScrollResponse clearScrollResponse = client.clearScroll(clearScrollRequest, RequestOptions.DEFAULT);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

    }
}
