<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Emit</title>
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.1.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.13/css/all.css" integrity="sha384-DNOHZ68U8hZfKXOrtjWvjxusGo9WQnrNx2sqG0tfsghAvtVlRW3tvkXWZh58N9jp" crossorigin="anonymous">
    <link rel="stylesheet" href="test.css">
</head>


<style>
    canvas {
        display: inline-block !important;
    }
</style>
<body >
<section id="menu">
    <div class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="/emit/index.html">Home</a>
            <div class="collapse navbar-collapse" id="navbarSupportedContent" rv-show="user.role">
                <ul class="navbar-nav mr-auto">
                    <li class="nav-item active dropdown">
                        <a class="nav-link active dropdown-toggle" href="#" id="configuringDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            Configuring
                        </a>
                        <div class="dropdown-menu" aria-labelledby="configuringDropdown">
                            <a class="dropdown-item" href="/emit/configuring/brokers.html">Brokers</a>
                            <a class="dropdown-item" href="/emit/configuring/clients.html">Clients</a>
                            <a class="dropdown-item" href="/emit/configuring/callbacks.html">Callbacks</a>
                        </div>
                    </li>
                    <li class="nav-item active dropdown">
                        <a class="nav-link active dropdown-toggle" href="#" id="monitoringDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            Monitoring
                        </a>
                        <div class="dropdown-menu" aria-labelledby="monitoringDropdown">
                            <a class="dropdown-item" href="/emit/monitoring/controls.html">Controls</a>
                            <a class="dropdown-item" href="/emit/monitoring/records.html">Records</a>
                            <a class="dropdown-item" href="/emit/monitoring/messages.html">Messages</a>
                        </div>
                    </li>
                </ul>
                <ul class="navbar-nav">
                    <li class="nav-item active dropdown">
                        <a class="nav-link active dropdown-toggle" href="#" id="accountDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            Account
                        </a>
                        <div class="dropdown-menu dropdown-menu-right" aria-labelledby="accountDropdown">
                            <div class="dropdown-header" rv-text="user.name"></div>
                            <a class="dropdown-item" href="settings.html">Settings</a>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item" href="/emit/user/clear">Disconnect</a>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</section>
<section id="title" class="jumbotron jumbotron-fluid">
    <div class="container-fluid">
        <h1 class="display-4">EMIT <small class="lead">a monitoring system for networks of MQTT clients</small></h1>
    </div>
</section>
<section id="content1" class="container-fluid">
    <div class="row">
        <div class="col-8" style="position: relative; height:40vh; width:80vw">
            <div class="chart-container">
                <canvas id="chart0"></canvas>
            </div>
            <nav class="row" style="margin-left:1em;margin-right:1em;padding-bottom:10ex;" aria-label="...">
                <button class="btn btn-outline-primary" rv-on-click="prev">prev</button>
                <div style="margin-left:auto;margin-right:auto;">
                    <span rv-text="started | date"></span> &mdash; <span rv-text="stopped | date"></span>
                </div>
                <button class="btn btn-outline-primary" rv-on-click="next">next</button>
            </nav>
        </div>
        <div class="col-4">
            <form class="form" role="form" name="form">
                <div class="form-group">
                    <label for="topic">Client</label>
                    <select id="topic" class="form-control" rv-value="uuid" rv-on-change="messages.search" placeholder="Client" required>
                        <option rv-each-item="clients.items" rv-value="item.uuid" rv-text="item.name"></option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="time">Time Interval</label>
                    <select id="time" class="form-control" rv-value="time" rv-on-change="messages.search" placeholder="Time" required>
                        <option value="minute">per minute</option>
                        <option value="hour">per hour</option>
                        <option value="day">per day</option>
                    </select>
                </div>
                <div class="form-group">
                    <button type="button" class="btn btn-outline-primary" rv-on-click="timestamp">now</button>
                </div>
            </form>
        </div>
    </div>
</section>
<footer class="footer fixed-bottom bg-light text-dark">
    <p class="text-center">Copyright Â© 2015-2018. ICAM. All rights reserved.</p>
</footer>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.15.1/moment.min.js"></script>
<script src="https://playground.abysscorp.org/chartjs/livecharts/dist/Chart.min.js"></script>
<script src="Scripts/peakData.js"></script>
<script src="Scripts/ardgData.js"></script>
<script>

    /*
    Colors that will be used during the implementation of the charts
     */
    let colors = {
        red: 'rgb(255, 99, 132)',
        orange: 'rgb(255, 159, 64)',
        yellow: 'rgb(255, 205, 86)',
        green: 'rgb(75, 192, 192)',
        blue: 'rgb(54, 162, 235)',
        purple: 'rgb(153, 102, 255)',
        grey: 'rgb(201, 203, 207)'
    };


    let ardgfirst=[];
    let peakfirst=[];
    let samples = 10;
    let speed = 500;
    let timeout = samples * speed;
    let ardgvalues = [];
    let peakvalues = [];
    let labels = [];
    let charts = [];
    let val = 0;
    let val1 = 0;
    let scale = 1;
    let v1 = 0;
    let v = 0;
    /*
    First call of ardgDataFunction and peakDataFunction in order to get last
    Data from elasticsearch (3s interval)
    These calls happen only in the launch of the application.
     */
    ardgDataFunction();
    peakDataFunction();

    /*
    This function sends the elements collected from elasticsearch one by one to the Chart
    getardgData and getpeakData are two lists that contain the last items in a 3-second-interval,
    everytime the ardgDataFunction/peakDataFunction are called, the two lists elements refresh.
    After several Tests, the safest and the most reliable option is to refresh the lists when each one
    of the them contains at least 2 elements
    Also, for the visualization continuity, sometimes a same value can occur two times in a row
    if the next element doesn't manage to arrive from the Web server.
     */
    var pull = function() {

if (getardgData.length===2 || getardgData.length===1 || getardgData.length===0){ardgDataFunction();}
if (getpeakData.length === 2 || getpeakData.length===1 || getpeakData.length===0){peakDataFunction();}

        v = JSON.stringify(getardgData[0]['VALUE']);
        ardgfirst.push(v);
        if (getardgData.length>1){getardgData.shift();}
       v1 = JSON.stringify(getpeakData[0]['VALUE']);
        peakfirst.push(v1);
        if (getpeakData.length>1){getpeakData.shift();}
    }

    /*

    */
    addEmptyValues(ardgvalues,10,2000);
    addEmptyValues(peakvalues, 10,2000);

    /*
    The chart initializer which contains empty values, to be shown at the launch of the application,
    and loaded with data just after 3 seconds from the launch
     */

    function initialize() {
        charts.push(new Chart(document.getElementById("chart0").getContext('2d'), {
            type: 'line',
            data: {
                //labels: labels,
                datasets: [{
                    label: 'Ardgetti',
                    data: ardgvalues,
                    borderColor: 'rgb(75, 192, 192)',
                    borderWidth: 3,
                    lineTension: 0.35,
                    pointRadius: 2
                }, {
                        label: 'Peaktech',
                        data: peakvalues,
                        borderColor: 'rgb(71, 102, 122)',
                        borderWidth: 3,
                        lineTension: 0.35,
                        pointRadius: 2
                    }]},
            options: {
                responsive: true,
                legend: true,
                scales: {
                    xAxes: [{
                        type: "time",
                        display: false
                    }],
                    yAxes: [{
                        display: true,
                        min:0
                    }]}}}));
    }

    /*
    This function adds some empty values containing just current timestamps
     */
    function addEmptyValues(arr, n,ms) {
        for(let i = 0; i < n; i++) {
            arr.push({
                x: moment().subtract(ms, 'milliseconds').toDate(),
                y: null
            });
        }
    }

    function updateCharts(){
        charts.forEach(function(chart) {
            chart.update();
        });
    }

    /*
    This function calls the pull() function in order to send data to the Chart.
    It sends data one by one and not as an array.
     */
    function progress() {
             pull();
        val = ardgfirst[0];
        val1 = peakfirst[0];
        //console.log(val+' '+val1);
        if (getardgData===undefined){ardgDataFunction();}
        if (getpeakData===undefined){peakDataFunction();}
        console.log(getardgData.length+' '+getpeakData.length);
        ardgfirst.shift();
        peakfirst.shift();
        ardgvalues.push({
                x: new Date(),
                y: val
            });
        peakvalues.push({
            x: new Date(),
            y: val1
        });
        ardgvalues.shift();
        peakvalues.shift();

    }
/*
This recurrent method auto calls itself every 200 ms.
It's the most important method that calls all the other methods already implemented,
 */
    function advance() {
        if (ardgvalues[0] !== null && peakvalues[0]==null && scale < 4) {
            updateCharts();
        }
        progress();
        updateCharts();
        setTimeout(function() {
            requestAnimationFrame(advance);
        }, 600);
    }

        initialize();

    /*
    For stability measures, the advance Function will be called 3.5 seconds after the launch of the application
    in order the be sure 100% that data would arrive. Otherwise, there would be a possiblity that the Chart
    maintains empty.
     */
        setTimeout(advance,3500);
</script>

</body>

</html>